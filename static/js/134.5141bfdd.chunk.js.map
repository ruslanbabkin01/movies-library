{"version":3,"file":"static/js/134.5141bfdd.chunk.js","mappings":"mTAGMA,EAAU,mCAIT,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,sGACkBC,EAAAA,GAAAA,IAAA,oCAAuCF,IADzD,cACCG,EADD,OAEGC,EAAYD,EAASE,KAArBD,QAFH,kBAGEA,GAHF,kEAMA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,8FAAwCC,EAAxC,+BAA+C,EAA/C,SACkBN,EAAAA,GAAAA,IAAA,gCACIF,EADJ,kBACqBO,EADrB,iBACmCC,IAFrD,cACCL,EADD,OAIGC,EAAYD,EAASE,KAArBD,QAJH,kBAKEA,GALF,mEAQA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,yFACkBR,EAAAA,GAAAA,IAAA,iBAAoBQ,EAApB,oBAAuCV,IADzD,uBACGK,EADH,EACGA,KADH,kBAEEA,GAFF,kEAKA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAAgCD,GAAhC,yFACkBR,EAAAA,GAAAA,IAAA,iBACXQ,EADW,4BACgBV,IAFlC,cACCG,EADD,OAIGS,EAAST,EAASE,KAAlBO,KAJH,kBAKEA,GALF,kEAQA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAgCH,GAAhC,yFACkBR,EAAAA,GAAAA,IAAA,iBACXQ,EADW,4BACgBV,IAFlC,cACCG,EADD,OAIGC,EAAYD,EAASE,KAArBD,QAJH,kBAKEA,GALF,kEA7BPF,EAAAA,GAAAA,SAAAA,QAAA,8B,mLCEe,SAASY,IAAU,IAAD,EAC/B,GAA4BC,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMb,EAAK,UAAGY,EAAaE,IAAI,gBAApB,QAAgC,GAwB3C,OAtBAC,EAAAA,EAAAA,YAAU,WAAM,wCAEd,8GAEuBhB,EAAAA,EAAAA,IAAkBC,GAFzC,UAEUF,EAFV,OAGIY,EAAUZ,GACLA,EAAKkB,OAJd,uBAKMC,EAAAA,GAAAA,KAAA,UAAcjB,EAAd,eALN,4EASIkB,QAAQC,IAAR,MATJ,2DAFc,sBACA,KAAVnB,GADU,mCAcdoB,EACD,GAAE,CAACpB,KAQF,6BACE,SAAC,KAAD,CAAWqB,SAPf,SAA0BC,GAExBT,EAD8B,KAAXS,EAAgB,CAAEtB,MAAOsB,GAAW,CAAC,EAEzD,IAKIb,IAAU,SAAC,KAAD,CAAcA,OAAQA,KACjC,SAAC,EAAAc,SAAD,CAAUC,UAAU,SAAC,KAAD,IAApB,UACE,SAAC,KAAD,QAIP,C","sources":["api/themoviedbAPI.js","pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\n// const API_KEY = process.env.REACT_APP_API_KEY;\nconst API_KEY = '13d1d6108716c95692977ae4bce9cff7';\n\naxios.defaults.baseURL = `https://api.themoviedb.org/3`;\n\nexport async function fetchTrendMovies() {\n  const response = await axios.get(`/trending/all/day?api_key=${API_KEY}`);\n  const { results } = response.data;\n  return results;\n}\n\nexport async function fetchSearchMovies(query, page = 1) {\n  const response = await axios.get(\n    `/search/movie?api_key=${API_KEY}&query=${query}&page=${page}`\n  );\n  const { results } = response.data;\n  return results;\n}\n\nexport async function fetchAboutMovie(movieId) {\n  const { data } = await axios.get(`/movie/${movieId}?api_key=${API_KEY}`);\n  return data;\n}\n\nexport async function fetchActorsMovie(movieId) {\n  const response = await axios.get(\n    `/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  const { cast } = response.data;\n  return cast;\n}\n\nexport async function fetchReviewMovie(movieId) {\n  const response = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  const { results } = response.data;\n  return results;\n}\n","import { Searchbar } from 'components';\nimport { Outlet, useSearchParams } from 'react-router-dom';\nimport { fetchSearchMovies } from '../api/themoviedbAPI';\nimport { VideoGallery, Loader } from 'components';\nimport { useEffect, useState, Suspense } from 'react';\nimport { toast } from 'react-toastify';\n\nexport default function Movies() {\n  const [movies, setMovies] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (query === '') return;\n    async function fetchMovie() {\n      try {\n        const data = await fetchSearchMovies(query);\n        setMovies(data);\n        if (!data.length) {\n          toast.info(`${query} not found`);\n          return;\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    fetchMovie();\n  }, [query]);\n\n  function handleFormSubmit(search) {\n    const nextParams = search !== '' ? { query: search } : {};\n    setSearchParams(nextParams);\n  }\n\n  return (\n    <main>\n      <Searchbar onSubmit={handleFormSubmit} />\n      {movies && <VideoGallery movies={movies} />}\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </main>\n  );\n}\n"],"names":["API_KEY","fetchTrendMovies","axios","response","results","data","fetchSearchMovies","query","page","fetchAboutMovie","movieId","fetchActorsMovie","cast","fetchReviewMovie","Movies","useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","get","useEffect","length","toast","console","log","fetchMovie","onSubmit","search","Suspense","fallback"],"sourceRoot":""}