{"version":3,"file":"static/js/687.f202bc5e.chunk.js","mappings":"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","sources":["api/themoviedbAPI.ts","hooks/useLocalStorage.ts","components/MovieCard.tsx","pages/MovieDetails.tsx"],"sourcesContent":["import { IResponseReviews, IReview } from './../types/reviews';\nimport { ICastResponse, ICast } from './../types/cast';\nimport { IMovie } from './../types/movie';\nimport axios from 'axios';\nimport { IServerResponse, IMovies } from 'types/movies';\n\nconst TheMovieDb = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n});\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nexport async function fetchTrendMovies() {\n  const { data } = await TheMovieDb<IServerResponse<IMovies>>(\n    `/trending/all/day?api_key=${API_KEY}`\n  );\n  const { results } = data;\n  return results;\n}\n\nexport async function fetchSearchMovies(query: string, page = 1) {\n  const { data } = await TheMovieDb<IServerResponse<IMovies>>(\n    `/search/movie?api_key=${API_KEY}&query=${query}&page=${page}`\n  );\n  const { results } = data;\n  return results;\n}\n\nexport async function fetchAboutMovie(movieId: string | undefined) {\n  const { data } = await TheMovieDb<IMovie>(\n    `/movie/${movieId}?api_key=${API_KEY}`\n  );\n  return data;\n}\n\nexport async function fetchActorsMovie(movieId: string | undefined) {\n  const { data } = await TheMovieDb<ICastResponse<ICast>>(\n    `/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  const { cast } = data;\n  return cast;\n}\n\nexport async function fetchReviewMovie(movieId: string | undefined) {\n  const { data } = await TheMovieDb<IResponseReviews<IReview>>(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  const { results } = data;\n  return results;\n}\n","import { useState, useEffect } from 'react';\n\nexport const useLocalStorage = (key: string, defaultValue?: any) => {\n  const [value, setValue] = useState(() => {\n    let currentValue;\n    try {\n      currentValue = JSON.parse(localStorage.getItem(key) ?? defaultValue);\n    } catch (error) {\n      currentValue = defaultValue;\n    }\n    return currentValue;\n  });\n\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(value));\n  }, [value, key]);\n\n  return [value, setValue];\n};\n","import { IMovie } from 'types/movie';\nimport defMovie from '../images/defMovie.webp';\nimport { useLocalStorage } from 'hooks/useLocalStorage';\nimport { useEffect, useState } from 'react';\n\ninterface IModvieCardProps {\n  movie: IMovie;\n}\n\nexport const MovieCard = ({ movie }: IModvieCardProps) => {\n  const [currentMovieId, setCurrentMovieId] = useLocalStorage('currentMovie');\n  const [watched, setWatched] = useLocalStorage('watchedMovies', []);\n  const [queue, setQueue] = useLocalStorage('queueMovies', []);\n  const [isAddToWatched, setIsAddWatched] = useState(false);\n  const [isAddToQueue, setIsAddQueue] = useState(false);\n\n  useEffect(() => {\n    setCurrentMovieId(movie.id);\n    checkCurrentMovie(watched, currentMovieId, setIsAddWatched);\n    checkCurrentMovie(queue, currentMovieId, setIsAddQueue);\n  }, [\n    currentMovieId,\n    movie.id,\n    queue,\n    setCurrentMovieId,\n    setIsAddQueue,\n    setIsAddWatched,\n    watched,\n  ]);\n\n  function checkCurrentMovie(\n    array: IMovie[],\n    currentMovieId: number,\n    toggleFunc: Function\n  ) {\n    const findCurrentMovie = array.find(\n      (item: IMovie) => item.id === currentMovieId\n    );\n    findCurrentMovie ? toggleFunc(true) : toggleFunc(false);\n  }\n\n  function findInWatchedMovie(id: number) {\n    const isFind = watched.find((item: IMovie) => item.id === id);\n    if (isFind) {\n      const newArrayMovies = watched.filter((item: IMovie) => item.id !== id);\n      setWatched([...newArrayMovies]);\n      setIsAddWatched(false);\n      return;\n    }\n    setWatched([...watched, movie]);\n    setIsAddWatched(true);\n  }\n\n  function findInQueueMovie(id: number) {\n    const isFind = queue.find((item: IMovie) => item.id === id);\n    if (isFind) {\n      const newArrayMovies = queue.filter((item: IMovie) => item.id !== id);\n      setQueue([...newArrayMovies]);\n      setIsAddQueue(false);\n      return;\n    }\n    setQueue([...queue, movie]);\n    setIsAddQueue(true);\n  }\n\n  const activeStyle = {\n    background: 'red',\n  };\n\n  return (\n    <div className=\"max-w-lg sm:max-w-3xl xl:max-w-full mb-3 mx-auto sm:flex  xl:w-9/12 \">\n      <div className=\"max-w-xs  lg:max-w-sm mx-auto flex items-center mb-2 sm:mb-0 \">\n        <img\n          className=\" object-cover rounded\"\n          src={\n            movie.poster_path\n              ? `https://image.tmdb.org/t/p/original${movie.poster_path}`\n              : defMovie\n          }\n          alt={movie.title}\n        />\n      </div>\n\n      <div className=\" text-center sm:p-4 sm:text-left\">\n        <h2 className=\"font-bold text-xl mb-2 md:text-2xl\">\n          {movie.title}\n          <span>({Number.parseInt(movie.release_date)})</span>\n        </h2>\n        <p className=\"mb-2 font-semibold text-lg\">\n          Rating:{' '}\n          <span className=\"text-red-500\">{movie.vote_average.toFixed(1)}</span>\n        </p>\n        <h3 className=\"text-lg font-semibold \">Overview</h3>\n        <p className=\"mb-2\">{movie.overview}</p>\n        <h4 className=\"font-semibold text-lg\">Genres</h4>\n        <p className=\"mb-5 lg:mb-16\">\n          {movie.genres.map(({ name }) => name).join('  ')}\n        </p>\n        <ul className=\"flex gap-4 justify-center xl:gap-10 xl:justify-start\">\n          <li>\n            <button\n              onClick={() => findInWatchedMovie(movie.id)}\n              className=\"bg-blue-500 p-2 rounded hover:bg-red-600 text-white focus:bg-red-600\"\n              style={isAddToWatched ? activeStyle : undefined}\n            >\n              {isAddToWatched ? 'Remove from watched' : 'Add to watched'}\n            </button>\n          </li>\n          <li>\n            <button\n              onClick={() => findInQueueMovie(movie.id)}\n              className=\"bg-blue-500 p-2 rounded hover:bg-red-600 text-white focus:bg-red-600\"\n              style={isAddToQueue ? activeStyle : undefined}\n            >\n              {isAddToQueue ? 'Remove from queue' : 'Add to queue'}\n            </button>\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { Outlet, useParams, useLocation, NavLink } from 'react-router-dom';\nimport { Suspense, useEffect, useState } from 'react';\nimport { fetchAboutMovie } from '../api/themoviedbAPI';\nimport { MovieCard } from 'components/MovieCard';\nimport { Loader } from 'components/Loader';\nimport { IMovie } from 'types/movie';\nimport { AxiosError } from 'axios';\nimport { toast } from 'react-toastify';\n\nexport default function MovieDetails() {\n  const [movie, setMovie] = useState<IMovie>();\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/movies';\n\n  useEffect(() => {\n    async function fetchMovie() {\n      try {\n        const data = await fetchAboutMovie(movieId);\n        setMovie(data);\n     } catch (e: unknown) {\n        const error = e as AxiosError;\n        console.log(error.message);\n        toast.error(error.message)\n      }\n    }\n    fetchMovie();\n  }, [movieId]);\n\n  const activeStyle = {\n    background: 'red',\n    color: 'white',\n  };\n\n  return (\n    <div className=\"mx-auto\">\n      <NavLink\n        className=\"inline-block px-6 py-1 mb-3 ml-20 rounded cursor-pointer bg-blue-500 text-white hover:bg-red-600 focus:text-white focus:bg-red-600\"\n        to={backLinkHref}\n      >\n        Back\n      </NavLink>\n      {movie && <MovieCard movie={movie} />}\n      <h2 className=\"mb-4 text-center font-semibold text-lg\">\n        Additional information\n      </h2>\n      <ul className=\"flex justify-center gap-4 mb-5\">\n        <li className=\"\">\n          <NavLink\n            style={({ isActive }) => (isActive ? activeStyle : undefined)}\n            className=\"text-white bg-blue-500 py-2 px-5 rounded cursor-pointer hover:bg-red-600 focus:bg-red-600\"\n            to=\"cast\"\n          >\n            Cast\n          </NavLink>\n        </li>\n        <li className=\"mx-5\">\n          <NavLink\n            style={({ isActive }) => (isActive ? activeStyle : undefined)}\n            className=\"text-white bg-blue-500 py-2 px-5 rounded cursor-pointer hover:bg-red-600 focus:bg-red-600\"\n            to=\"reviews\"\n          >\n            Reviews\n          </NavLink>\n        </li>\n      </ul>\n\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </div>\n  );\n}\n"],"names":["TheMovieDb","axios","baseURL","API_KEY","process","fetchTrendMovies","data","results","fetchSearchMovies","query","page","fetchAboutMovie","movieId","fetchActorsMovie","cast","fetchReviewMovie","useLocalStorage","key","defaultValue","useState","currentValue","JSON","parse","localStorage","getItem","error","value","setValue","useEffect","setItem","stringify","MovieCard","movie","currentMovieId","setCurrentMovieId","watched","setWatched","queue","setQueue","isAddToWatched","setIsAddWatched","isAddToQueue","setIsAddQueue","checkCurrentMovie","array","toggleFunc","find","item","id","activeStyle","background","className","src","poster_path","defMovie","alt","title","Number","parseInt","release_date","vote_average","toFixed","overview","genres","map","name","join","onClick","newArrayMovies","filter","findInWatchedMovie","style","undefined","findInQueueMovie","MovieDetails","setMovie","useParams","backLinkHref","useLocation","state","from","console","log","message","toast","fetchMovie","color","to","isActive","Suspense","fallback","Loader"],"sourceRoot":""}