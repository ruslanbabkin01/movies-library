{"version":3,"file":"static/js/787.d8f1737d.chunk.js","mappings":"uRAMMA,E,QAAaC,GAAAA,OAAa,CAC9BC,QAASC,iCAGLC,EAAUD,mCAET,SAAeE,IAAtB,4CAAO,OAAP,oBAAO,wGACkBL,EAAU,oCACFI,IAF1B,uBACGE,EADH,EACGA,KAGAC,EAAYD,EAAZC,QAJH,kBAKEA,GALF,kEAQA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,gGAAgDC,EAAhD,+BAAuD,EAAvD,SACkBV,EAAU,gCACNI,EADM,kBACWK,EADX,iBACyBC,IAFrD,uBACGJ,EADH,EACGA,KAGAC,EAAYD,EAAZC,QAJH,kBAKEA,GALF,mEAQA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,yFACkBZ,EAAU,iBACrBY,EADqB,oBACFR,IAF1B,uBACGE,EADH,EACGA,KADH,kBAIEA,GAJF,kEAOA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAAgCD,GAAhC,2FACkBZ,EAAU,iBACrBY,EADqB,4BACMR,IAFlC,uBACGE,EADH,EACGA,KAGAQ,EAASR,EAATQ,KAJH,kBAKEA,GALF,kEAQA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAgCH,GAAhC,2FACkBZ,EAAU,iBACrBY,EADqB,4BACMR,IAFlC,uBACGE,EADH,EACGA,KAGAC,EAAYD,EAAZC,QAJH,kBAKEA,GALF,kE,yKCnCQ,SAASS,IACtB,IAAQJ,GAAYK,EAAAA,EAAAA,MAAZL,QACR,GAAoCM,EAAAA,EAAAA,UAAkB,IAAtD,eAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,gHAEuBR,EAAAA,EAAAA,IAAiBD,GAFxC,OAEUN,EAFV,OAGIc,EAAcd,GAHlB,gDAKUgB,EALV,KAMIC,QAAQC,IAAIF,EAAMG,SAClBC,EAAAA,GAAAA,MAAYJ,EAAMG,SAPtB,0DADc,uBAAC,WAAD,wBAWdE,EACD,GAAE,CAACf,KAGF,8BACGO,IACC,+BACE,eAAIS,UAAU,6CAAd,SACGT,GACCA,EAAWU,KACT,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAAWC,EAAtC,EAAsCA,cAAtC,OACE,gBACEN,UAAU,8DADZ,WAIE,gBAAKA,UAAU,OAAf,UACE,gBACEA,UAAU,8BACVO,IACEJ,EAAY,6CAC8BA,GACtCK,EAENC,IAAKL,OAIT,iBAAKJ,UAAU,MAAf,WACE,mCACA,iBAAMA,UAAU,YAAhB,gBAA6BI,QAA7B,IAA6BA,EAAAA,EAAQE,KACrC,wCACA,iBAAMN,UAAU,YAAhB,SAA6BK,SAlB1BH,EAHT,SA+Bf,C","sources":["api/themoviedbAPI.ts","components/Cast.tsx"],"sourcesContent":["import { IResponseReviews, IReview } from './../types/reviews';\nimport { ICastResponse, ICast } from './../types/cast';\nimport { IMovie } from './../types/movie';\nimport axios from 'axios';\nimport { IServerResponse, IMovies } from 'types/movies';\n\nconst TheMovieDb = axios.create({\n  baseURL: process.env.REACT_APP_THEMOVIE_URL,\n});\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nexport async function fetchTrendMovies() {\n  const { data } = await TheMovieDb<IServerResponse<IMovies>>(\n    `/trending/all/day?api_key=${API_KEY}`\n  );\n  const { results } = data;\n  return results;\n}\n\nexport async function fetchSearchMovies(query: string, page = 1) {\n  const { data } = await TheMovieDb<IServerResponse<IMovies>>(\n    `/search/movie?api_key=${API_KEY}&query=${query}&page=${page}`\n  );\n  const { results } = data;\n  return results;\n}\n\nexport async function fetchAboutMovie(movieId: string | undefined) {\n  const { data } = await TheMovieDb<IMovie>(\n    `/movie/${movieId}?api_key=${API_KEY}`\n  );\n  return data;\n}\n\nexport async function fetchActorsMovie(movieId: string | undefined) {\n  const { data } = await TheMovieDb<ICastResponse<ICast>>(\n    `/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  const { cast } = data;\n  return cast;\n}\n\nexport async function fetchReviewMovie(movieId: string | undefined) {\n  const { data } = await TheMovieDb<IResponseReviews<IReview>>(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  const { results } = data;\n  return results;\n}\n","import { fetchActorsMovie } from '../api/themoviedbAPI';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport defAvatar from '../images/defAvatar.jpeg';\nimport { ICast } from 'types/cast';\nimport { AxiosError } from 'axios';\nimport { toast } from 'react-toastify';\n\nexport default function Cast() {\n  const { movieId } = useParams();\n  const [actorsList, setActorsList] = useState<ICast[]>([]);\n\n  useEffect(() => {\n    async function fetchMovie() {\n      try {\n        const data = await fetchActorsMovie(movieId);\n        setActorsList(data);\n      } catch (e: unknown) {\n        const error = e as AxiosError;\n        console.log(error.message);\n        toast.error(error.message)\n      }\n    }\n    fetchMovie();\n  }, [movieId]);\n\n  return (\n    <>\n      {actorsList && (\n        <>\n          <ul className=\"sm:flex flex-wrap gap-3 p-3 justify-center\">\n            {actorsList &&\n              actorsList.map(\n                ({ id, profile_path, name, character, original_name }) => (\n                  <li\n                    className=\"flex flex-col sm:basis-1/3 lg:basis-1/6 rounded border mb-3\"\n                    key={id}\n                  >\n                    <div className=\"grow\">\n                      <img\n                        className=\"object-cover rounded border\"\n                        src={\n                          profile_path\n                            ? `https://image.tmdb.org/t/p/original${profile_path}`\n                            : defAvatar\n                        }\n                        alt={name}\n                      />\n                    </div>\n\n                    <div className=\"p-2\">\n                      <h4>Name:</h4>\n                      <span className=\"font-bold\">{name ?? original_name}</span>\n                      <h4>Character:</h4>\n                      <span className=\"font-bold\">{character}</span>\n                    </div>\n                  </li>\n                )\n              )}\n          </ul>\n        </>\n      )}\n    </>\n  );\n}\n"],"names":["TheMovieDb","axios","baseURL","process","API_KEY","fetchTrendMovies","data","results","fetchSearchMovies","query","page","fetchAboutMovie","movieId","fetchActorsMovie","cast","fetchReviewMovie","Cast","useParams","useState","actorsList","setActorsList","useEffect","error","console","log","message","toast","fetchMovie","className","map","id","profile_path","name","character","original_name","src","defAvatar","alt"],"sourceRoot":""}